// schema.prisma
// Generator
generator client {
  provider = "prisma-client-js"
}

// Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====

enum GlobalRole {
  ADMIN
  SPV
  REVIEWER
  USER
}

enum MeetingRole {
  spv
  reviewer
  participant
}

enum TtfuStatus {
  OPEN
  IN_PROGRESS
  DONE
  REJECTED
}

enum EvidenceType {
  link
  file
}

enum ReviewStatus {
  approved
  rejected
  needs_revision
}

// ===== Core Models =====

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  passwordHash  String?  // if using email/password; optional if OAuth only
  globalRole    GlobalRole @default(USER)

  // Relations
  meetingsCreated   Meeting[]     @relation("MeetingsCreated")
  ttfuAssigned      TTFU[]        @relation("TTFU_Assignee")
  ttfuReviewed      TTFU[]        @relation("TTFU_Reviewer")
  evidencesSubmitted Evidence[]   @relation("Evidence_Submitter")
  reviewsMade       Review[]      @relation("Review_Reviewer")
  meetingMemberships MeetingParticipant[]
  auditLogs         AuditLog[]

  // NextAuth
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  date        DateTime // meeting date-time
  notes       String?
  createdById String
  createdBy   User     @relation("MeetingsCreated", fields: [createdById], references: [id], onDelete: Restrict)

  participants MeetingParticipant[]
  ttfus         TTFU[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date])
}

model MeetingParticipant {
  id         String      @id @default(cuid())
  meetingId  String
  userId     String
  role       MeetingRole

  meeting    Meeting     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime    @default(now())

  @@unique([meetingId, userId])
  @@index([userId])
}

model TTFU {
  id           String     @id @default(cuid())
  meetingId    String
  title        String
  description  String?
  assigneeId   String
  reviewerId   String
  status       TtfuStatus @default(OPEN)
  dueDate      DateTime?

  meeting      Meeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  assignee     User       @relation("TTFU_Assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reviewer     User       @relation("TTFU_Reviewer", fields: [reviewerId], references: [id], onDelete: SetNull)
  evidences    Evidence[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([meetingId])
  @@index([assigneeId])
  @@index([reviewerId])
  @@index([status])
}

model Evidence {
  id           String       @id @default(cuid())
  ttfuId       String
  type         EvidenceType
  url          String?      // for link evidence
  filePath     String?      // for uploaded file evidence (S3/Supabase path)
  description  String?
  submittedById String

  ttfu         TTFU         @relation(fields: [ttfuId], references: [id], onDelete: Cascade)
  submittedBy  User         @relation("Evidence_Submitter", fields: [submittedById], references: [id], onDelete: SetNull)
  reviews      Review[]

  createdAt    DateTime     @default(now())

  @@index([ttfuId])
  @@index([submittedById])
}

model Review {
  id          String       @id @default(cuid())
  evidenceId  String
  reviewerId  String
  status      ReviewStatus
  comment     String?

  evidence    Evidence     @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  reviewer    User         @relation("Review_Reviewer", fields: [reviewerId], references: [id], onDelete: SetNull)

  createdAt   DateTime     @default(now())

  @@index([evidenceId])
  @@index([reviewerId])
}

// ===== Optional: Audit Log =====
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // e.g., "TTFU_STATUS_CHANGE"
  entity    String   // e.g., "TTFU", "EVIDENCE"
  entityId  String
  metadata  Json?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([entity, entityId])
}

// ===== NextAuth (Prisma Adapter) =====
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}